---
import Pagination from "@/components/Paginator.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import {
	getAllCollectionPosts,
	getUniqueCategories,
	getUniqueTags,
	groupPostsByYear,
} from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort, getLatestUpdatedPost } from "@/utils/date";
import type { GetStaticPaths, Page } from "astro";
import { MAX_TAGS, MAX_CATEGORIES, MAX_POSTS_PER_PAGE, MAX_LATEST_POSTS } from "@/utils/constant";
import type { AllItem } from "@/types";
import RecentUpdate from "@/components/RecentUpdate.astro";

export const getStaticPaths = (async ({ paginate }) => {
	const allPosts = await getAllCollectionPosts();
	const uniqueTags = getUniqueTags(allPosts).slice(0, MAX_TAGS);
	const uniqueCategories = getUniqueCategories(allPosts).slice(0, MAX_CATEGORIES);
	const latestUpdatedPost = allPosts.sort(getLatestUpdatedPost).slice(0, MAX_LATEST_POSTS);
	const postsCount = allPosts.length;
	return paginate(allPosts.sort(collectionDateSort), {
		pageSize: MAX_POSTS_PER_PAGE,
		props: { uniqueTags, uniqueCategories, postsCount, latestUpdatedPost },
	});
}) satisfies GetStaticPaths;

interface Props {
	page: Page<AllItem>;
	uniqueTags: string[];
	uniqueCategories: string[];
	postsCount: number;
	latestUpdatedPost: AllItem[];
}

const { page, postsCount } = Astro.props;

const meta = {
	description: "Read my collection of posts and the things that interest me",
	title: "Posts",
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: "← Previous Page",
			url: page.url.prev,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			text: "Next Page →",
			url: page.url.next,
		},
	}),
};

const groupedByYear = groupPostsByYear(page.data);
const descYearKeys = Object.keys(groupedByYear).sort((a, b) => +b - +a);
---

<PageLayout meta={meta}>
	<div class="mb-6 flex items-center gap-3">
		<h1 class="title">Archive({postsCount})</h1>
	</div>
	<div class="grid sm:grid-cols-[3fr_1fr] sm:gap-x-8 sm:gap-y-16">
		<div>
			{
				descYearKeys.map((yearKey) => (
					<section aria-labelledby={`year-${yearKey}`}>
						<h2 id={`year-${yearKey}`} class="title text-lg">
							<span class="sr-only">Posts in</span>
							{yearKey}
						</h2>
						<ul class="mt-5 mb-16 space-y-4 text-start">
							{groupedByYear[yearKey]?.map((p) => (
								<li class="grid gap-2 sm:grid-cols-[auto_1fr] sm:[&_q]:col-start-2">
									<PostPreview post={p} />
								</li>
							))}
						</ul>
					</section>
				))
			}
			<Pagination {...paginationProps} />
		</div>
		<aside class="flex flex-col gap-8">
			<RecentUpdate />
		</aside>
	</div>
</PageLayout>
